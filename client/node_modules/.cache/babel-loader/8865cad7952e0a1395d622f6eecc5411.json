{"ast":null,"code":"import { rest } from \"msw\";\nconst token = \"ahuBHejkJJiMDhmODZhZi0zaeLTQ4ZfeaseOGZgesai1jZWYgrTA07i73Gebhu98\";\nlet colors = [{\n  color: \"aliceblue\",\n  code: {\n    hex: \"#f0f8ff\"\n  },\n  id: 1\n}, {\n  color: \"limegreen\",\n  code: {\n    hex: \"#99ddbc\"\n  },\n  id: 2\n}, {\n  color: \"aqua\",\n  code: {\n    hex: \"#00ffff\"\n  },\n  id: 3\n}, {\n  color: \"aquamarine\",\n  code: {\n    hex: \"#7fffd4\"\n  },\n  id: 4\n}, {\n  color: \"lilac\",\n  code: {\n    hex: \"#9a99dd\"\n  },\n  id: 5\n}, {\n  color: \"softpink\",\n  code: {\n    hex: \"#dd99ba\"\n  },\n  id: 6\n}, {\n  color: \"bisque\",\n  code: {\n    hex: \"#dd9a99\"\n  },\n  id: 7\n}, {\n  color: \"softyellow\",\n  code: {\n    hex: \"#dcdd99\"\n  },\n  id: 8\n}, {\n  color: \"blanchedalmond\",\n  code: {\n    hex: \"#ffebcd\"\n  },\n  id: 9\n}, {\n  color: \"blue\",\n  code: {\n    hex: \"#6093ca\"\n  },\n  id: 10\n}, {\n  color: \"blueviolet\",\n  code: {\n    hex: \"#8a2be2\"\n  },\n  id: 11\n}];\nlet nextId = 12;\n\nfunction authenticator(req) {\n  const {\n    authorization\n  } = req.headers.map;\n  console.log(req);\n  return authorization === token;\n}\n\nconst urlBase = 'http://localhost:5000/api';\nexport const handlers = [// Handles a POST /login request\nrest.post(`${urlBase}/login`, (req, res, ctx) => {\n  const {\n    username,\n    password\n  } = req.body;\n\n  if (username === \"Lambda School\" && password === \"i<3Lambd4\") {\n    return res(ctx.status(200), ctx.json({\n      payload: token\n    }));\n  } else {\n    return res(ctx.status(403), ctx.json({\n      error: \"Username or Password incorrect. Please see Readme\"\n    }));\n  }\n}), // Handles a GET /user request\nrest.get(`${urlBase}/colors`, (req, res, ctx) => {\n  if (authenticator(req)) {\n    return res(ctx.status(200), ctx.json(colors));\n  } else {\n    res(ctx.status(403), ctx.json({\n      error: \"User must be logged in to do that.\"\n    }));\n  }\n}), rest.post(`${urlBase}/colors`, (req, res, ctx) => {\n  if (authenticator(req)) {\n    if (req.body.color !== undefined && req.body.code !== undefined) {\n      const newColor = req.body;\n      newColor.id = nextId;\n      colors.push(newColor);\n    }\n\n    nextId = nextId + 1;\n    return res(ctx.status(201), ctx.json(colors));\n  } else {\n    return res(ctx.status(403), ctx.json({\n      error: \"User must be logged in to do that.\"\n    }));\n  }\n}), rest.put(`${urlBase}/colors/:id`, (req, res, ctx) => {\n  if (authenticator(req)) {\n    if (!req.params.id) {\n      return res(ctx.status(400), ctx.json(\"Your request is missing the color id\"));\n    }\n\n    if (req.body.id === undefined || !req.body.color || !req.body.code) {\n      return res(ctx.status(422), ctx.json(\"Make sure your request body has all the fields it needs\"));\n    }\n\n    colors = colors.map(color => {\n      if (`${color.id}` === req.params.id) {\n        return req.body;\n      }\n\n      return color;\n    });\n    return res(ctx.status(200), ctx.json(req.body));\n  } else {\n    return res(ctx.status(403), ctx.json({\n      error: \"User must be logged in to do that.\"\n    }));\n  }\n}), rest.delete(`${urlBase}/colors/:id`, (req, res, ctx) => {\n  if (authenticator(req)) {\n    if (!req.params.id) return res(ctx.status(400), ctx.json(\"Your request is missing the color id\"));\n    colors = colors.filter(color => `${color.id}` !== req.params.id);\n    return res(ctx.status(202), ctx.json(req.params.id));\n  } else {\n    return res(ctx.status(403), ctx.json({\n      error: \"User must be logged in to do that.\"\n    }));\n  }\n}), rest.get(urlBase, function (req, res, ctx) {\n  return res(ctx.status(200), ctx.json(\"The App is working!\"));\n})];","map":{"version":3,"sources":["C:/Users/Admin2/OneDrive/Lambda School/Web_3.3/Sprint/web-sprint-challenge-advanced-web-applications/client/src/mocks/handlers.js"],"names":["rest","token","colors","color","code","hex","id","nextId","authenticator","req","authorization","headers","map","console","log","urlBase","handlers","post","res","ctx","username","password","body","status","json","payload","error","get","undefined","newColor","push","put","params","delete","filter"],"mappings":"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","sourcesContent":["import { rest } from \"msw\";\r\n\r\nconst token =\r\n  \"ahuBHejkJJiMDhmODZhZi0zaeLTQ4ZfeaseOGZgesai1jZWYgrTA07i73Gebhu98\";\r\n\r\nlet colors = [\r\n  {\r\n    color: \"aliceblue\",\r\n    code: {\r\n      hex: \"#f0f8ff\",\r\n    },\r\n    id: 1,\r\n  },\r\n  {\r\n    color: \"limegreen\",\r\n    code: {\r\n      hex: \"#99ddbc\",\r\n    },\r\n    id: 2,\r\n  },\r\n  {\r\n    color: \"aqua\",\r\n    code: {\r\n      hex: \"#00ffff\",\r\n    },\r\n    id: 3,\r\n  },\r\n  {\r\n    color: \"aquamarine\",\r\n    code: {\r\n      hex: \"#7fffd4\",\r\n    },\r\n    id: 4,\r\n  },\r\n  {\r\n    color: \"lilac\",\r\n    code: {\r\n      hex: \"#9a99dd\",\r\n    },\r\n    id: 5,\r\n  },\r\n  {\r\n    color: \"softpink\",\r\n    code: {\r\n      hex: \"#dd99ba\",\r\n    },\r\n    id: 6,\r\n  },\r\n  {\r\n    color: \"bisque\",\r\n    code: {\r\n      hex: \"#dd9a99\",\r\n    },\r\n    id: 7,\r\n  },\r\n  {\r\n    color: \"softyellow\",\r\n    code: {\r\n      hex: \"#dcdd99\",\r\n    },\r\n    id: 8,\r\n  },\r\n  {\r\n    color: \"blanchedalmond\",\r\n    code: {\r\n      hex: \"#ffebcd\",\r\n    },\r\n    id: 9,\r\n  },\r\n  {\r\n    color: \"blue\",\r\n    code: {\r\n      hex: \"#6093ca\",\r\n    },\r\n    id: 10,\r\n  },\r\n  {\r\n    color: \"blueviolet\",\r\n    code: {\r\n      hex: \"#8a2be2\",\r\n    },\r\n    id: 11,\r\n  },\r\n];\r\n\r\nlet nextId = 12;\r\n\r\nfunction authenticator(req) {\r\n  const { authorization } = req.headers.map;\r\n  console.log(req);\r\n  return (authorization === token);\r\n}\r\n\r\nconst urlBase = 'http://localhost:5000/api';\r\n\r\nexport const handlers = [\r\n  // Handles a POST /login request\r\n  rest.post(`${urlBase}/login`, (req, res, ctx) => {\r\n    const { username, password } = req.body;\r\n    if (username === \"Lambda School\" && password === \"i<3Lambd4\") {\r\n      return res(\r\n          ctx.status(200),\r\n          ctx.json({\r\n              payload: token,\r\n          }))\r\n    } else {\r\n        return res(\r\n            ctx.status(403),\r\n            ctx.json({ error: \"Username or Password incorrect. Please see Readme\" })\r\n        );\r\n    }\r\n  }),\r\n  // Handles a GET /user request\r\n  rest.get(`${urlBase}/colors`, (req, res, ctx) => {\r\n    if (authenticator(req)) {\r\n      return res(\r\n        ctx.status(200),\r\n        ctx.json(colors)\r\n      );\r\n    } else {\r\n      res(\r\n        ctx.status(403),\r\n        ctx.json({ error: \"User must be logged in to do that.\" })\r\n      )\r\n    }\r\n  }),\r\n\r\n  rest.post(`${urlBase}/colors`, (req, res, ctx) => {\r\n    if (authenticator(req)) {\r\n      if (req.body.color !== undefined && req.body.code !== undefined) {\r\n        const newColor = req.body;\r\n        newColor.id = nextId;\r\n        colors.push(newColor);\r\n      }\r\n      nextId = nextId + 1;\r\n      return res(\r\n        ctx.status(201), \r\n        ctx.json(colors)\r\n      );\r\n    } else {\r\n      return res(\r\n        ctx.status(403),\r\n        ctx.json({ error: \"User must be logged in to do that.\" })\r\n      )\r\n    }\r\n  }),\r\n\r\n  rest.put(`${urlBase}/colors/:id`, (req, res, ctx) => {\r\n    if (authenticator(req)) {\r\n      if (!req.params.id) {\r\n        return res(\r\n          ctx.status(400),\r\n          ctx.json(\"Your request is missing the color id\")\r\n        );\r\n      }\r\n\r\n      if (req.body.id === undefined || !req.body.color || !req.body.code) {\r\n        return res(\r\n          ctx.status(422),\r\n          ctx.json(\"Make sure your request body has all the fields it needs\")\r\n        );\r\n      }\r\n\r\n      colors = colors.map((color) => {\r\n        if (`${color.id}` === req.params.id) {\r\n          return req.body;\r\n        }\r\n        return color;\r\n      });\r\n\r\n      return res(ctx.status(200), ctx.json(req.body));\r\n    } else {\r\n      return res(\r\n        ctx.status(403),\r\n        ctx.json({ error: \"User must be logged in to do that.\" })\r\n      );\r\n    }\r\n  }),\r\n\r\n  rest.delete(`${urlBase}/colors/:id`, (req, res, ctx) => {\r\n    if (authenticator(req)) {\r\n      if (!req.params.id)\r\n        return res(\r\n          ctx.status(400),\r\n          ctx.json(\"Your request is missing the color id\")\r\n        );\r\n      colors = colors.filter((color) => `${color.id}` !== req.params.id);\r\n      return res(ctx.status(202), ctx.json(req.params.id));\r\n    } else {\r\n      return res(\r\n        ctx.status(403),\r\n        ctx.json({ error: \"User must be logged in to do that.\" })\r\n      )\r\n    }\r\n  }),\r\n\r\n  rest.get(urlBase, function (req, res, ctx) {\r\n    return res(\r\n      ctx.status(200),\r\n      ctx.json(\"The App is working!\")\r\n    );\r\n  }),\r\n];"]},"metadata":{},"sourceType":"module"}