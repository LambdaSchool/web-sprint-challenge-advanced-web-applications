{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin2\\\\OneDrive\\\\Lambda School\\\\Web_3.3\\\\Sprint\\\\web-sprint-challenge-advanced-web-applications\\\\client\\\\src\\\\components\\\\Login.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { axiosWithAuth } from \"../helpers/axiosWithAuth\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Login = () => {\n  _s();\n\n  // make a post request to retrieve a token from the api\n  // when you have handled the token, navigate to the BubblePage route\n  const [credentials, setCredentials] = useState({\n    username: '',\n    password: ''\n  });\n\n  const handleChange = e => {\n    setCredentials({\n      credentials: { ...credentials,\n        [e.target.name]: e.target.value\n      }\n    });\n  };\n\n  const login = e => {\n    // e.preventDefault();    \n    //1. make a request to our server for login\n    axiosWithAuth() //2. we need to pass in our credential\n    .post('http://localhost:5000/api/login', credentials).then(res => {\n      //3. If request is successful, console.log our result\n      console.log(res.data);\n      localStorage.setItem('token', res.data.payload);\n      this.props.history.push('/protected');\n    }) //4. If request fails show our error\n    .catch(err => {\n      console.log(err.response);\n    });\n  };\n\n  useEffect(() => {\n    // make a post request to retrieve a token from the api\n    // when you have handled the token, navigate to the BubblePage route\n    login();\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"login\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: login,\n      children: [\"UserName:\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"username\",\n        value: credentials.username,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), \"Password:\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        name: \"password\",\n        value: credentials.password,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Log in\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 3\n  }, this);\n};\n\n_s(Login, \"CfIkDdSrTYIlV/WreH0wSZodjXM=\");\n\n_c = Login;\nexport default Login; //Task List:\n//1. Build a form containing a username and password field.\n//2. Add whatever state nessiary for form functioning.\n//3. MAKE SURE THAT FORM INPUTS INCLUDE THE LABEL TEXT \"username\" and \"password\" RESPECTIVELY.\n//4. If either the username or password is not displaied display EXACTLY the following words: Username or Password not valid.\n//5. If the username / password is equal to Lambda School / i<3Lambd4, save that token to localStorage.\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["C:/Users/Admin2/OneDrive/Lambda School/Web_3.3/Sprint/web-sprint-challenge-advanced-web-applications/client/src/components/Login.js"],"names":["React","useEffect","useState","axiosWithAuth","Login","credentials","setCredentials","username","password","handleChange","e","target","name","value","login","post","then","res","console","log","data","localStorage","setItem","payload","props","history","push","catch","err","response"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,aAAT,QAA8B,0BAA9B;;;AAEA,MAAMC,KAAK,GAAG,MAAM;AAAA;;AAClB;AACA;AACA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCJ,QAAQ,CAAC;AAC7CK,IAAAA,QAAQ,EAAE,EADmC;AAE7CC,IAAAA,QAAQ,EAAE;AAFmC,GAAD,CAA9C;;AAMA,QAAMC,YAAY,GAAGC,CAAC,IAAI;AACxBJ,IAAAA,cAAc,CAAC;AACbD,MAAAA,WAAW,EAAE,EACX,GAAGA,WADQ;AAEX,SAACK,CAAC,CAACC,MAAF,CAASC,IAAV,GAAiBF,CAAC,CAACC,MAAF,CAASE;AAFf;AADA,KAAD,CAAd;AAMD,GAPD;;AASA,QAAMC,KAAK,GAAGJ,CAAC,IAAI;AACjB;AACA;AACAP,IAAAA,aAAa,GACb;AADa,KAEZY,IAFD,CAEM,iCAFN,EAEyCV,WAFzC,EAGCW,IAHD,CAGMC,GAAG,IAAI;AACX;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,IAAhB;AACAC,MAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BL,GAAG,CAACG,IAAJ,CAASG,OAAvC;AACA,WAAKC,KAAL,CAAWC,OAAX,CAAmBC,IAAnB,CAAwB,YAAxB;AACD,KARD,EASA;AATA,KAUGC,KAVH,CAUSC,GAAG,IAAE;AACVV,MAAAA,OAAO,CAACC,GAAR,CAAYS,GAAG,CAACC,QAAhB;AACD,KAZH;AAaD,GAhBD;;AAkBA5B,EAAAA,SAAS,CAAC,MAAI;AACZ;AACA;AACAa,IAAAA,KAAK;AACN,GAJQ,CAAT;AAMA,sBACA;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA,2BACI;AAAM,MAAA,QAAQ,EAAEA,KAAhB;AAAA,2CAEE;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,IAAI,EAAC,UAFP;AAGE,QAAA,KAAK,EAAET,WAAW,CAACE,QAHrB;AAIE,QAAA,QAAQ,EAAEE;AAJZ;AAAA;AAAA;AAAA;AAAA,cAFF,4BASE;AACE,QAAA,IAAI,EAAC,UADP;AAEE,QAAA,IAAI,EAAC,UAFP;AAGE,QAAA,KAAK,EAAEJ,WAAW,CAACG,QAHrB;AAIE,QAAA,QAAQ,EAAEC;AAJZ;AAAA;AAAA;AAAA;AAAA,cATF,eAeE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAfF;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADA;AAqBD,CA/DD;;GAAML,K;;KAAAA,K;AAiEN,eAAeA,KAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { axiosWithAuth } from \"../helpers/axiosWithAuth\";\r\n\r\nconst Login = () => {\r\n  // make a post request to retrieve a token from the api\r\n  // when you have handled the token, navigate to the BubblePage route\r\n  const [credentials, setCredentials] = useState({\r\n    username: '',\r\n    password: ''\r\n  });\r\n\r\n\r\n  const handleChange = e => {\r\n    setCredentials({\r\n      credentials: {\r\n        ...credentials,\r\n        [e.target.name]: e.target.value\r\n      }\r\n    });\r\n  };\r\n\r\n  const login = e => {\r\n    // e.preventDefault();    \r\n    //1. make a request to our server for login\r\n    axiosWithAuth()\r\n    //2. we need to pass in our credential\r\n    .post('http://localhost:5000/api/login', credentials)\r\n    .then(res => {\r\n      //3. If request is successful, console.log our result\r\n      console.log(res.data);\r\n      localStorage.setItem('token', res.data.payload);\r\n      this.props.history.push('/protected');\r\n    })\r\n    //4. If request fails show our error\r\n      .catch(err=>{\r\n        console.log(err.response);\r\n      });\r\n  };\r\n\r\n  useEffect(()=>{\r\n    // make a post request to retrieve a token from the api\r\n    // when you have handled the token, navigate to the BubblePage route\r\n    login()\r\n  });\r\n\r\n  return (\r\n  <div className='login'>\r\n      <form onSubmit={login}>      \r\n        UserName:\r\n        <input\r\n          type=\"text\"\r\n          name=\"username\"\r\n          value={credentials.username}\r\n          onChange={handleChange}  \r\n          />\r\n        Password:\r\n        <input\r\n          type=\"password\"\r\n          name=\"password\"\r\n          value={credentials.password}\r\n          onChange={handleChange}\r\n          />\r\n        <button>Log in</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n\r\n//Task List:\r\n//1. Build a form containing a username and password field.\r\n//2. Add whatever state nessiary for form functioning.\r\n//3. MAKE SURE THAT FORM INPUTS INCLUDE THE LABEL TEXT \"username\" and \"password\" RESPECTIVELY.\r\n//4. If either the username or password is not displaied display EXACTLY the following words: Username or Password not valid.\r\n//5. If the username / password is equal to Lambda School / i<3Lambd4, save that token to localStorage."]},"metadata":{},"sourceType":"module"}